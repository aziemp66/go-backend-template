// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/user/service/type.go
//
// Generated by this command:
//
//	mockgen -package=mock_service -source=internal/modules/user/service/type.go -destination=mock/service/user_service_mock.go -typed=true
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	user_model "backend-template/internal/modules/user/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserService) ChangePassword(ctx context.Context, id, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, id, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserServiceMockRecorder) ChangePassword(ctx, id, oldPassword, newPassword any) *MockUserServiceChangePasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserService)(nil).ChangePassword), ctx, id, oldPassword, newPassword)
	return &MockUserServiceChangePasswordCall{Call: call}
}

// MockUserServiceChangePasswordCall wrap *gomock.Call
type MockUserServiceChangePasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceChangePasswordCall) Return(arg0 error) *MockUserServiceChangePasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceChangePasswordCall) Do(f func(context.Context, string, string, string) error) *MockUserServiceChangePasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceChangePasswordCall) DoAndReturn(f func(context.Context, string, string, string) error) *MockUserServiceChangePasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ForgotPassword mocks base method.
func (m *MockUserService) ForgotPassword(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserServiceMockRecorder) ForgotPassword(ctx, email any) *MockUserServiceForgotPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserService)(nil).ForgotPassword), ctx, email)
	return &MockUserServiceForgotPasswordCall{Call: call}
}

// MockUserServiceForgotPasswordCall wrap *gomock.Call
type MockUserServiceForgotPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceForgotPasswordCall) Return(arg0 error) *MockUserServiceForgotPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceForgotPasswordCall) Do(f func(context.Context, string) error) *MockUserServiceForgotPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceForgotPasswordCall) DoAndReturn(f func(context.Context, string) error) *MockUserServiceForgotPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByEmail mocks base method.
func (m *MockUserService) GetUserByEmail(ctx context.Context, email string) (user_model.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(user_model.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserServiceMockRecorder) GetUserByEmail(ctx, email any) *MockUserServiceGetUserByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserService)(nil).GetUserByEmail), ctx, email)
	return &MockUserServiceGetUserByEmailCall{Call: call}
}

// MockUserServiceGetUserByEmailCall wrap *gomock.Call
type MockUserServiceGetUserByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserByEmailCall) Return(res user_model.GetUserResponse, err error) *MockUserServiceGetUserByEmailCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserByEmailCall) Do(f func(context.Context, string) (user_model.GetUserResponse, error)) *MockUserServiceGetUserByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserByEmailCall) DoAndReturn(f func(context.Context, string) (user_model.GetUserResponse, error)) *MockUserServiceGetUserByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(ctx context.Context, id string) (user_model.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(user_model.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(ctx, id any) *MockUserServiceGetUserByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), ctx, id)
	return &MockUserServiceGetUserByIDCall{Call: call}
}

// MockUserServiceGetUserByIDCall wrap *gomock.Call
type MockUserServiceGetUserByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserByIDCall) Return(res user_model.GetUserResponse, err error) *MockUserServiceGetUserByIDCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserByIDCall) Do(f func(context.Context, string) (user_model.GetUserResponse, error)) *MockUserServiceGetUserByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserByIDCall) DoAndReturn(f func(context.Context, string) (user_model.GetUserResponse, error)) *MockUserServiceGetUserByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, email, password any) *MockUserServiceLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, email, password)
	return &MockUserServiceLoginCall{Call: call}
}

// MockUserServiceLoginCall wrap *gomock.Call
type MockUserServiceLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceLoginCall) Return(token string, err error) *MockUserServiceLoginCall {
	c.Call = c.Call.Return(token, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceLoginCall) Do(f func(context.Context, string, string) (string, error)) *MockUserServiceLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceLoginCall) DoAndReturn(f func(context.Context, string, string) (string, error)) *MockUserServiceLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, email, password, name, address string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, email, password, name, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, email, password, name, address any) *MockUserServiceRegisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, email, password, name, address)
	return &MockUserServiceRegisterCall{Call: call}
}

// MockUserServiceRegisterCall wrap *gomock.Call
type MockUserServiceRegisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceRegisterCall) Return(id string, err error) *MockUserServiceRegisterCall {
	c.Call = c.Call.Return(id, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceRegisterCall) Do(f func(context.Context, string, string, string, string) (string, error)) *MockUserServiceRegisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceRegisterCall) DoAndReturn(f func(context.Context, string, string, string, string) (string, error)) *MockUserServiceRegisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResetPassword mocks base method.
func (m *MockUserService) ResetPassword(ctx context.Context, token, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, token, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserServiceMockRecorder) ResetPassword(ctx, token, newPassword any) *MockUserServiceResetPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserService)(nil).ResetPassword), ctx, token, newPassword)
	return &MockUserServiceResetPasswordCall{Call: call}
}

// MockUserServiceResetPasswordCall wrap *gomock.Call
type MockUserServiceResetPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceResetPasswordCall) Return(err error) *MockUserServiceResetPasswordCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceResetPasswordCall) Do(f func(context.Context, string, string) error) *MockUserServiceResetPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceResetPasswordCall) DoAndReturn(f func(context.Context, string, string) error) *MockUserServiceResetPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(ctx context.Context, id, name, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, id, name, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(ctx, id, name, address any) *MockUserServiceUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), ctx, id, name, address)
	return &MockUserServiceUpdateUserCall{Call: call}
}

// MockUserServiceUpdateUserCall wrap *gomock.Call
type MockUserServiceUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateUserCall) Return(arg0 error) *MockUserServiceUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateUserCall) Do(f func(context.Context, string, string, string) error) *MockUserServiceUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateUserCall) DoAndReturn(f func(context.Context, string, string, string) error) *MockUserServiceUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VerifyUser mocks base method.
func (m *MockUserService) VerifyUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockUserServiceMockRecorder) VerifyUser(ctx, id any) *MockUserServiceVerifyUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockUserService)(nil).VerifyUser), ctx, id)
	return &MockUserServiceVerifyUserCall{Call: call}
}

// MockUserServiceVerifyUserCall wrap *gomock.Call
type MockUserServiceVerifyUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceVerifyUserCall) Return(err error) *MockUserServiceVerifyUserCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceVerifyUserCall) Do(f func(context.Context, string) error) *MockUserServiceVerifyUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceVerifyUserCall) DoAndReturn(f func(context.Context, string) error) *MockUserServiceVerifyUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
