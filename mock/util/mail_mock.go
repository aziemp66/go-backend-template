// Code generated by MockGen. DO NOT EDIT.
// Source: util/mail/type.go
//
// Generated by this command:
//
//	mockgen -package=mock_util -source=util/mail/type.go -destination=mock/util/mail_mock.go
//

// Package mock_util is a generated GoMock package.
package mock_util

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gomail "gopkg.in/gomail.v2"
)

// MockMailManager is a mock of MailManager interface.
type MockMailManager struct {
	ctrl     *gomock.Controller
	recorder *MockMailManagerMockRecorder
}

// MockMailManagerMockRecorder is the mock recorder for MockMailManager.
type MockMailManagerMockRecorder struct {
	mock *MockMailManager
}

// NewMockMailManager creates a new mock instance.
func NewMockMailManager(ctrl *gomock.Controller) *MockMailManager {
	mock := &MockMailManager{ctrl: ctrl}
	mock.recorder = &MockMailManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailManager) EXPECT() *MockMailManagerMockRecorder {
	return m.recorder
}

// SentMessage mocks base method.
func (m *MockMailManager) SentMessage(msg *gomail.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMessage indicates an expected call of SentMessage.
func (mr *MockMailManagerMockRecorder) SentMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessage", reflect.TypeOf((*MockMailManager)(nil).SentMessage), msg)
}
