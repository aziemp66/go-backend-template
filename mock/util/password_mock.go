// Code generated by MockGen. DO NOT EDIT.
// Source: util/password/type.go
//
// Generated by this command:
//
//	mockgen -package=mock_util -source=util/password/type.go -destination=mock/util/password_mock.go
//

// Package mock_util is a generated GoMock package.
package mock_util

import (
	reflect "reflect"

	util_error "backend-template/util/error"
	gomock "go.uber.org/mock/gomock"
)

// MockPasswordManager is a mock of PasswordManager interface.
type MockPasswordManager struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordManagerMockRecorder
}

// MockPasswordManagerMockRecorder is the mock recorder for MockPasswordManager.
type MockPasswordManagerMockRecorder struct {
	mock *MockPasswordManager
}

// NewMockPasswordManager creates a new mock instance.
func NewMockPasswordManager(ctrl *gomock.Controller) *MockPasswordManager {
	mock := &MockPasswordManager{ctrl: ctrl}
	mock.recorder = &MockPasswordManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordManager) EXPECT() *MockPasswordManagerMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockPasswordManager) CheckPasswordHash(password, hash string) *util_error.ClientError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", password, hash)
	ret0, _ := ret[0].(*util_error.ClientError)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockPasswordManagerMockRecorder) CheckPasswordHash(password, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockPasswordManager)(nil).CheckPasswordHash), password, hash)
}

// HashPassword mocks base method.
func (m *MockPasswordManager) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPasswordManagerMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordManager)(nil).HashPassword), password)
}

// PasswordValidation mocks base method.
func (m *MockPasswordManager) PasswordValidation(password string) *util_error.ClientError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordValidation", password)
	ret0, _ := ret[0].(*util_error.ClientError)
	return ret0
}

// PasswordValidation indicates an expected call of PasswordValidation.
func (mr *MockPasswordManagerMockRecorder) PasswordValidation(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordValidation", reflect.TypeOf((*MockPasswordManager)(nil).PasswordValidation), password)
}
