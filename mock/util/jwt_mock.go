// Code generated by MockGen. DO NOT EDIT.
// Source: util/jwt/type.go
//
// Generated by this command:
//
//	mockgen -package=mock_util -source=util/jwt/type.go -destination=mock/util/jwt_mock.go
//

// Package mock_util is a generated GoMock package.
package mock_util

import (
	reflect "reflect"
	time "time"

	util_jwt "backend-template/util/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTManager is a mock of JWTManager interface.
type MockJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTManagerMockRecorder
}

// MockJWTManagerMockRecorder is the mock recorder for MockJWTManager.
type MockJWTManagerMockRecorder struct {
	mock *MockJWTManager
}

// NewMockJWTManager creates a new mock instance.
func NewMockJWTManager(ctrl *gomock.Controller) *MockJWTManager {
	mock := &MockJWTManager{ctrl: ctrl}
	mock.recorder = &MockJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTManager) EXPECT() *MockJWTManagerMockRecorder {
	return m.recorder
}

// GenerateAuthToken mocks base method.
func (m *MockJWTManager) GenerateAuthToken(identifier, name, role string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthToken", identifier, name, role, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAuthToken indicates an expected call of GenerateAuthToken.
func (mr *MockJWTManagerMockRecorder) GenerateAuthToken(identifier, name, role, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthToken", reflect.TypeOf((*MockJWTManager)(nil).GenerateAuthToken), identifier, name, role, duration)
}

// VerifyAuthToken mocks base method.
func (m *MockJWTManager) VerifyAuthToken(tokenString string) (*util_jwt.AuthClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthToken", tokenString)
	ret0, _ := ret[0].(*util_jwt.AuthClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAuthToken indicates an expected call of VerifyAuthToken.
func (mr *MockJWTManagerMockRecorder) VerifyAuthToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthToken", reflect.TypeOf((*MockJWTManager)(nil).VerifyAuthToken), tokenString)
}
